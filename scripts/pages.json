[{"name":"abstract fun getNext(): Long","description":"p.SequenceGenerator.getNext","location":"kotlin-practice/p/-sequence-generator/get-next.html","searchKeys":["getNext","abstract fun getNext(): Long","p.SequenceGenerator.getNext"]},{"name":"class CustomList<Type>(arrayList: Array<Type>) : Iterable<Type> ","description":"p.CustomList","location":"kotlin-practice/p/-custom-list/index.html","searchKeys":["CustomList","class CustomList<Type>(arrayList: Array<Type>) : Iterable<Type> ","p.CustomList"]},{"name":"class ListNode(val: Int, next: ListNode?)","description":"leetcode.linkedlists.ListNode","location":"kotlin-practice/leetcode.linkedlists/-list-node/index.html","searchKeys":["ListNode","class ListNode(val: Int, next: ListNode?)","leetcode.linkedlists.ListNode"]},{"name":"class MinStack","description":"leetcode.design.MinStack","location":"kotlin-practice/leetcode.design/-min-stack/index.html","searchKeys":["MinStack","class MinStack","leetcode.design.MinStack"]},{"name":"class PrintSequenceCallable(sequenceGenerator: SequenceGenerator) : Callable<List<Long>> ","description":"p.PrintSequenceCallable","location":"kotlin-practice/p/-print-sequence-callable/index.html","searchKeys":["PrintSequenceCallable","class PrintSequenceCallable(sequenceGenerator: SequenceGenerator) : Callable<List<Long>> ","p.PrintSequenceCallable"]},{"name":"class SafeSequenceGenerator : SequenceGenerator","description":"p.SafeSequenceGenerator","location":"kotlin-practice/p/-safe-sequence-generator/index.html","searchKeys":["SafeSequenceGenerator","class SafeSequenceGenerator : SequenceGenerator","p.SafeSequenceGenerator"]},{"name":"class Solution : VersionControl","description":"leetcode.sorting.Solution","location":"kotlin-practice/leetcode.sorting/-solution/index.html","searchKeys":["Solution","class Solution : VersionControl","leetcode.sorting.Solution"]},{"name":"class Solution(nums: IntArray)","description":"leetcode.design.Solution","location":"kotlin-practice/leetcode.design/-solution/index.html","searchKeys":["Solution","class Solution(nums: IntArray)","leetcode.design.Solution"]},{"name":"class StateMachine","description":"leetcode.strings.StateMachine","location":"kotlin-practice/leetcode.strings/-state-machine/index.html","searchKeys":["StateMachine","class StateMachine","leetcode.strings.StateMachine"]},{"name":"data class Node(data: Int, left: Node?, right: Node?)","description":"leetcode.trees.Node","location":"kotlin-practice/leetcode.trees/-node/index.html","searchKeys":["Node","data class Node(data: Int, left: Node?, right: Node?)","leetcode.trees.Node"]},{"name":"data class TreeNode(val: Int, left: TreeNode?, right: TreeNode?)","description":"leetcode.trees.TreeNode","location":"kotlin-practice/leetcode.trees/-tree-node/index.html","searchKeys":["TreeNode","data class TreeNode(val: Int, left: TreeNode?, right: TreeNode?)","leetcode.trees.TreeNode"]},{"name":"enum State : Enum<State> ","description":"leetcode.strings.State","location":"kotlin-practice/leetcode.strings/-state/index.html","searchKeys":["State","enum State : Enum<State> ","leetcode.strings.State"]},{"name":"fun <Type> CustomList(arrayList: Array<Type>)","description":"p.CustomList.CustomList","location":"kotlin-practice/p/-custom-list/-custom-list.html","searchKeys":["CustomList","fun <Type> CustomList(arrayList: Array<Type>)","p.CustomList.CustomList"]},{"name":"fun ListNode(val: Int, next: ListNode? = null)","description":"leetcode.linkedlists.ListNode.ListNode","location":"kotlin-practice/leetcode.linkedlists/-list-node/-list-node.html","searchKeys":["ListNode","fun ListNode(val: Int, next: ListNode? = null)","leetcode.linkedlists.ListNode.ListNode"]},{"name":"fun MinStack()","description":"leetcode.design.MinStack.MinStack","location":"kotlin-practice/leetcode.design/-min-stack/-min-stack.html","searchKeys":["MinStack","fun MinStack()","leetcode.design.MinStack.MinStack"]},{"name":"fun Node(data: Int, left: Node? = null, right: Node? = null)","description":"leetcode.trees.Node.Node","location":"kotlin-practice/leetcode.trees/-node/-node.html","searchKeys":["Node","fun Node(data: Int, left: Node? = null, right: Node? = null)","leetcode.trees.Node.Node"]},{"name":"fun PrintSequenceCallable(sequenceGenerator: SequenceGenerator)","description":"p.PrintSequenceCallable.PrintSequenceCallable","location":"kotlin-practice/p/-print-sequence-callable/-print-sequence-callable.html","searchKeys":["PrintSequenceCallable","fun PrintSequenceCallable(sequenceGenerator: SequenceGenerator)","p.PrintSequenceCallable.PrintSequenceCallable"]},{"name":"fun SafeSequenceGenerator()","description":"p.SafeSequenceGenerator.SafeSequenceGenerator","location":"kotlin-practice/p/-safe-sequence-generator/-safe-sequence-generator.html","searchKeys":["SafeSequenceGenerator","fun SafeSequenceGenerator()","p.SafeSequenceGenerator.SafeSequenceGenerator"]},{"name":"fun Solution()","description":"leetcode.sorting.Solution.Solution","location":"kotlin-practice/leetcode.sorting/-solution/-solution.html","searchKeys":["Solution","fun Solution()","leetcode.sorting.Solution.Solution"]},{"name":"fun Solution(nums: IntArray)","description":"leetcode.design.Solution.Solution","location":"kotlin-practice/leetcode.design/-solution/-solution.html","searchKeys":["Solution","fun Solution(nums: IntArray)","leetcode.design.Solution.Solution"]},{"name":"fun StateMachine()","description":"leetcode.strings.StateMachine.StateMachine","location":"kotlin-practice/leetcode.strings/-state-machine/-state-machine.html","searchKeys":["StateMachine","fun StateMachine()","leetcode.strings.StateMachine.StateMachine"]},{"name":"fun TreeNode(val: Int, left: TreeNode? = null, right: TreeNode? = null)","description":"leetcode.trees.TreeNode.TreeNode","location":"kotlin-practice/leetcode.trees/-tree-node/-tree-node.html","searchKeys":["TreeNode","fun TreeNode(val: Int, left: TreeNode? = null, right: TreeNode? = null)","leetcode.trees.TreeNode.TreeNode"]},{"name":"fun VersionControl()","description":"leetcode.sorting.VersionControl.VersionControl","location":"kotlin-practice/leetcode.sorting/-version-control/-version-control.html","searchKeys":["VersionControl","fun VersionControl()","leetcode.sorting.VersionControl.VersionControl"]},{"name":"fun binarySearch(nums: IntArray, target: Int): Int","description":"cake.binarySearch","location":"kotlin-practice/cake/binary-search.html","searchKeys":["binarySearch","fun binarySearch(nums: IntArray, target: Int): Int","cake.binarySearch"]},{"name":"fun canSum(targetSum: Int, items: IntArray): Boolean","description":".canSum","location":"kotlin-practice/[root]/can-sum.html","searchKeys":["canSum","fun canSum(targetSum: Int, items: IntArray): Boolean",".canSum"]},{"name":"fun checkMagazine(magazine: Array<String>, note: Array<String>): Boolean","description":"hackerrank.maps.checkMagazine","location":"kotlin-practice/hackerrank.maps/check-magazine.html","searchKeys":["checkMagazine","fun checkMagazine(magazine: Array<String>, note: Array<String>): Boolean","hackerrank.maps.checkMagazine"]},{"name":"fun climbStairs(n: Int): Int","description":"leetcode.dynamic.climbStairs","location":"kotlin-practice/leetcode.dynamic/climb-stairs.html","searchKeys":["climbStairs","fun climbStairs(n: Int): Int","leetcode.dynamic.climbStairs"]},{"name":"fun containsDuplicate(nums: IntArray): Boolean","description":"leetcode.arrays.containsDuplicate","location":"kotlin-practice/leetcode.arrays/contains-duplicate.html","searchKeys":["containsDuplicate","fun containsDuplicate(nums: IntArray): Boolean","leetcode.arrays.containsDuplicate"]},{"name":"fun countSwaps(a: IntArray): Int","description":"hackerrank.sorting.countSwaps","location":"kotlin-practice/hackerrank.sorting/count-swaps.html","searchKeys":["countSwaps","fun countSwaps(a: IntArray): Int","hackerrank.sorting.countSwaps"]},{"name":"fun countTestCases(n: Int, time: Int = 24): Int","description":".countTestCases","location":"kotlin-practice/[root]/count-test-cases.html","searchKeys":["countTestCases","fun countTestCases(n: Int, time: Int = 24): Int",".countTestCases"]},{"name":"fun deleteNode(node: ListNode?)","description":"leetcode.linkedlists.deleteNode","location":"kotlin-practice/leetcode.linkedlists/delete-node.html","searchKeys":["deleteNode","fun deleteNode(node: ListNode?)","leetcode.linkedlists.deleteNode"]},{"name":"fun finalResult(): Int","description":"leetcode.strings.StateMachine.finalResult","location":"kotlin-practice/leetcode.strings/-state-machine/final-result.html","searchKeys":["finalResult","fun finalResult(): Int","leetcode.strings.StateMachine.finalResult"]},{"name":"fun firstBadVersion(n: Int, bad: Int): Int","description":"leetcode.sorting.Solution.firstBadVersion","location":"kotlin-practice/leetcode.sorting/-solution/first-bad-version.html","searchKeys":["firstBadVersion","fun firstBadVersion(n: Int, bad: Int): Int","leetcode.sorting.Solution.firstBadVersion"]},{"name":"fun firstUniqChar(s: String): Int","description":"leetcode.strings.firstUniqChar","location":"kotlin-practice/leetcode.strings/first-uniq-char.html","searchKeys":["firstUniqChar","fun firstUniqChar(s: String): Int","leetcode.strings.firstUniqChar"]},{"name":"fun flippingBits(n: Long): Long","description":"hackerrank.flippingBits","location":"kotlin-practice/hackerrank/flipping-bits.html","searchKeys":["flippingBits","fun flippingBits(n: Long): Long","hackerrank.flippingBits"]},{"name":"fun getMaxProfit(stockPrices: IntArray): Int","description":"cake.getMaxProfit","location":"kotlin-practice/cake/get-max-profit.html","searchKeys":["getMaxProfit","fun getMaxProfit(stockPrices: IntArray): Int","cake.getMaxProfit"]},{"name":"fun getMin(): Int","description":"leetcode.design.MinStack.getMin","location":"kotlin-practice/leetcode.design/-min-stack/get-min.html","searchKeys":["getMin","fun getMin(): Int","leetcode.design.MinStack.getMin"]},{"name":"fun getState(): State","description":"leetcode.strings.StateMachine.getState","location":"kotlin-practice/leetcode.strings/-state-machine/get-state.html","searchKeys":["getState","fun getState(): State","leetcode.strings.StateMachine.getState"]},{"name":"fun intersect(nums1: IntArray, nums2: IntArray): IntArray","description":"leetcode.arrays.intersect","location":"kotlin-practice/leetcode.arrays/intersect.html","searchKeys":["intersect","fun intersect(nums1: IntArray, nums2: IntArray): IntArray","leetcode.arrays.intersect"]},{"name":"fun isBadVersion(v: Int, bad: Int): Boolean","description":"leetcode.sorting.VersionControl.isBadVersion","location":"kotlin-practice/leetcode.sorting/-version-control/is-bad-version.html","searchKeys":["isBadVersion","fun isBadVersion(v: Int, bad: Int): Boolean","leetcode.sorting.VersionControl.isBadVersion"]},{"name":"fun isPalindrome(head: ListNode?): Boolean","description":"leetcode.linkedlists.isPalindrome","location":"kotlin-practice/leetcode.linkedlists/is-palindrome.html","searchKeys":["isPalindrome","fun isPalindrome(head: ListNode?): Boolean","leetcode.linkedlists.isPalindrome"]},{"name":"fun isSymmetric(root: TreeNode?): Boolean","description":"leetcode.trees.isSymmetric","location":"kotlin-practice/leetcode.trees/is-symmetric.html","searchKeys":["isSymmetric","fun isSymmetric(root: TreeNode?): Boolean","leetcode.trees.isSymmetric"]},{"name":"fun isValid(s: String): Boolean","description":"leetcode.others.isValid","location":"kotlin-practice/leetcode.others/is-valid.html","searchKeys":["isValid","fun isValid(s: String): Boolean","leetcode.others.isValid"]},{"name":"fun isValidBST(rootNode: Node?): Boolean","description":"leetcode.trees.isValidBST","location":"kotlin-practice/leetcode.trees/is-valid-b-s-t.html","searchKeys":["isValidBST","fun isValidBST(rootNode: Node?): Boolean","leetcode.trees.isValidBST"]},{"name":"fun levelOrder(root: TreeNode?): List<List<Int>>","description":"leetcode.trees.levelOrder","location":"kotlin-practice/leetcode.trees/level-order.html","searchKeys":["levelOrder","fun levelOrder(root: TreeNode?): List<List<Int>>","leetcode.trees.levelOrder"]},{"name":"fun main()","description":".main","location":"kotlin-practice/[root]/main.html","searchKeys":["main","fun main()",".main"]},{"name":"fun main()","description":"hackerrank.main","location":"kotlin-practice/hackerrank/main.html","searchKeys":["main","fun main()","hackerrank.main"]},{"name":"fun main()","description":"leetcode.design.main","location":"kotlin-practice/leetcode.design/main.html","searchKeys":["main","fun main()","leetcode.design.main"]},{"name":"fun main()","description":"leetcode.dynamic.main","location":"kotlin-practice/leetcode.dynamic/main.html","searchKeys":["main","fun main()","leetcode.dynamic.main"]},{"name":"fun main()","description":"leetcode.linkedlists.main","location":"kotlin-practice/leetcode.linkedlists/main.html","searchKeys":["main","fun main()","leetcode.linkedlists.main"]},{"name":"fun main()","description":"leetcode.math.main","location":"kotlin-practice/leetcode.math/main.html","searchKeys":["main","fun main()","leetcode.math.main"]},{"name":"fun main()","description":"leetcode.others.main","location":"kotlin-practice/leetcode.others/main.html","searchKeys":["main","fun main()","leetcode.others.main"]},{"name":"fun main()","description":"leetcode.strings.main","location":"kotlin-practice/leetcode.strings/main.html","searchKeys":["main","fun main()","leetcode.strings.main"]},{"name":"fun main()","description":"leetcode.trees.main","location":"kotlin-practice/leetcode.trees/main.html","searchKeys":["main","fun main()","leetcode.trees.main"]},{"name":"fun main()","description":"p.main","location":"kotlin-practice/p/main.html","searchKeys":["main","fun main()","p.main"]},{"name":"fun matchingStrings(strings: Array<String>, queries: Array<String>): IntArray","description":"hackerrank.matchingStrings","location":"kotlin-practice/hackerrank/matching-strings.html","searchKeys":["matchingStrings","fun matchingStrings(strings: Array<String>, queries: Array<String>): IntArray","hackerrank.matchingStrings"]},{"name":"fun maxDepth(root: TreeNode?): Int","description":"leetcode.trees.maxDepth","location":"kotlin-practice/leetcode.trees/max-depth.html","searchKeys":["maxDepth","fun maxDepth(root: TreeNode?): Int","leetcode.trees.maxDepth"]},{"name":"fun maxMin(k: Int, arr: IntArray): Int","description":"hackerrank.maxMin","location":"kotlin-practice/hackerrank/max-min.html","searchKeys":["maxMin","fun maxMin(k: Int, arr: IntArray): Int","hackerrank.maxMin"]},{"name":"fun maxProfit(prices: IntArray): Int","description":"leetcode.arrays.maxProfit","location":"kotlin-practice/leetcode.arrays/max-profit.html","searchKeys":["maxProfit","fun maxProfit(prices: IntArray): Int","leetcode.arrays.maxProfit"]},{"name":"fun maxProfit(prices: IntArray): Int","description":"leetcode.dynamic.maxProfit","location":"kotlin-practice/leetcode.dynamic/max-profit.html","searchKeys":["maxProfit","fun maxProfit(prices: IntArray): Int","leetcode.dynamic.maxProfit"]},{"name":"fun maxProfitBuyOnce(prices: IntArray): Int","description":"leetcode.arrays.maxProfitBuyOnce","location":"kotlin-practice/leetcode.arrays/max-profit-buy-once.html","searchKeys":["maxProfitBuyOnce","fun maxProfitBuyOnce(prices: IntArray): Int","leetcode.arrays.maxProfitBuyOnce"]},{"name":"fun maxSubArray(nums: IntArray): Int","description":"leetcode.dynamic.maxSubArray","location":"kotlin-practice/leetcode.dynamic/max-sub-array.html","searchKeys":["maxSubArray","fun maxSubArray(nums: IntArray): Int","leetcode.dynamic.maxSubArray"]},{"name":"fun maximumToys(prices: IntArray, k: Int): Int","description":"hackerrank.sorting.maximumToys","location":"kotlin-practice/hackerrank.sorting/maximum-toys.html","searchKeys":["maximumToys","fun maximumToys(prices: IntArray, k: Int): Int","hackerrank.sorting.maximumToys"]},{"name":"fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int)","description":"leetcode.sorting.merge","location":"kotlin-practice/leetcode.sorting/merge.html","searchKeys":["merge","fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int)","leetcode.sorting.merge"]},{"name":"fun miniMaxSum(arr: IntArray)","description":"hackerrank.miniMaxSum","location":"kotlin-practice/hackerrank/mini-max-sum.html","searchKeys":["miniMaxSum","fun miniMaxSum(arr: IntArray)","hackerrank.miniMaxSum"]},{"name":"fun moveZeroes(nums: IntArray): IntArray","description":"leetcode.arrays.moveZeroes","location":"kotlin-practice/leetcode.arrays/move-zeroes.html","searchKeys":["moveZeroes","fun moveZeroes(nums: IntArray): IntArray","leetcode.arrays.moveZeroes"]},{"name":"fun myAtoi(s: String): Int","description":"leetcode.strings.myAtoi","location":"kotlin-practice/leetcode.strings/my-atoi.html","searchKeys":["myAtoi","fun myAtoi(s: String): Int","leetcode.strings.myAtoi"]},{"name":"fun myAtoiSimple(input: String): Int","description":"leetcode.strings.myAtoiSimple","location":"kotlin-practice/leetcode.strings/my-atoi-simple.html","searchKeys":["myAtoiSimple","fun myAtoiSimple(input: String): Int","leetcode.strings.myAtoiSimple"]},{"name":"fun plusMinus(arr: IntArray): Array<String>","description":"hackerrank.plusMinus","location":"kotlin-practice/hackerrank/plus-minus.html","searchKeys":["plusMinus","fun plusMinus(arr: IntArray): Array<String>","hackerrank.plusMinus"]},{"name":"fun plusOne(digits: IntArray): IntArray","description":"leetcode.arrays.plusOne","location":"kotlin-practice/leetcode.arrays/plus-one.html","searchKeys":["plusOne","fun plusOne(digits: IntArray): IntArray","leetcode.arrays.plusOne"]},{"name":"fun pop()","description":"leetcode.design.MinStack.pop","location":"kotlin-practice/leetcode.design/-min-stack/pop.html","searchKeys":["pop","fun pop()","leetcode.design.MinStack.pop"]},{"name":"fun push(v: Int)","description":"leetcode.design.MinStack.push","location":"kotlin-practice/leetcode.design/-min-stack/push.html","searchKeys":["push","fun push(v: Int)","leetcode.design.MinStack.push"]},{"name":"fun removeDuplicates(nums: IntArray): Int","description":"leetcode.arrays.removeDuplicates","location":"kotlin-practice/leetcode.arrays/remove-duplicates.html","searchKeys":["removeDuplicates","fun removeDuplicates(nums: IntArray): Int","leetcode.arrays.removeDuplicates"]},{"name":"fun removeNthFromEnd(head: ListNode?, n: Int): ListNode?","description":"leetcode.linkedlists.removeNthFromEnd","location":"kotlin-practice/leetcode.linkedlists/remove-nth-from-end.html","searchKeys":["removeNthFromEnd","fun removeNthFromEnd(head: ListNode?, n: Int): ListNode?","leetcode.linkedlists.removeNthFromEnd"]},{"name":"fun reset(): IntArray","description":"leetcode.design.Solution.reset","location":"kotlin-practice/leetcode.design/-solution/reset.html","searchKeys":["reset","fun reset(): IntArray","leetcode.design.Solution.reset"]},{"name":"fun reverseString(input: String): String","description":"leetcode.strings.reverseString","location":"kotlin-practice/leetcode.strings/reverse-string.html","searchKeys":["reverseString","fun reverseString(input: String): String","leetcode.strings.reverseString"]},{"name":"fun rob(nums: IntArray): Int","description":"leetcode.dynamic.rob","location":"kotlin-practice/leetcode.dynamic/rob.html","searchKeys":["rob","fun rob(nums: IntArray): Int","leetcode.dynamic.rob"]},{"name":"fun romanToInt(s: String): Int","description":"leetcode.math.romanToInt","location":"kotlin-practice/leetcode.math/roman-to-int.html","searchKeys":["romanToInt","fun romanToInt(s: String): Int","leetcode.math.romanToInt"]},{"name":"fun rotateArray(nums: IntArray, k: Int): IntArray","description":"leetcode.arrays.rotateArray","location":"kotlin-practice/leetcode.arrays/rotate-array.html","searchKeys":["rotateArray","fun rotateArray(nums: IntArray, k: Int): IntArray","leetcode.arrays.rotateArray"]},{"name":"fun runLength(s: String): String","description":"p.runLength","location":"kotlin-practice/p/run-length.html","searchKeys":["runLength","fun runLength(s: String): String","p.runLength"]},{"name":"fun shuffle(): IntArray","description":"leetcode.design.Solution.shuffle","location":"kotlin-practice/leetcode.design/-solution/shuffle.html","searchKeys":["shuffle","fun shuffle(): IntArray","leetcode.design.Solution.shuffle"]},{"name":"fun singleNumber(nums: IntArray): Int","description":"leetcode.arrays.singleNumber","location":"kotlin-practice/leetcode.arrays/single-number.html","searchKeys":["singleNumber","fun singleNumber(nums: IntArray): Int","leetcode.arrays.singleNumber"]},{"name":"fun sortedArrayToBST(nums: IntArray, start: Int = 0, end: Int = nums.size - 1): TreeNode?","description":"leetcode.trees.sortedArrayToBST","location":"kotlin-practice/leetcode.trees/sorted-array-to-b-s-t.html","searchKeys":["sortedArrayToBST","fun sortedArrayToBST(nums: IntArray, start: Int = 0, end: Int = nums.size - 1): TreeNode?","leetcode.trees.sortedArrayToBST"]},{"name":"fun timeConversion(s: String): String","description":"hackerrank.timeConversion","location":"kotlin-practice/hackerrank/time-conversion.html","searchKeys":["timeConversion","fun timeConversion(s: String): String","hackerrank.timeConversion"]},{"name":"fun top(): Int","description":"leetcode.design.MinStack.top","location":"kotlin-practice/leetcode.design/-min-stack/top.html","searchKeys":["top","fun top(): Int","leetcode.design.MinStack.top"]},{"name":"fun transition(ch: Char)","description":"leetcode.strings.StateMachine.transition","location":"kotlin-practice/leetcode.strings/-state-machine/transition.html","searchKeys":["transition","fun transition(ch: Char)","leetcode.strings.StateMachine.transition"]},{"name":"fun twoStrings(s1: String, s2: String): Boolean","description":"hackerrank.maps.twoStrings","location":"kotlin-practice/hackerrank.maps/two-strings.html","searchKeys":["twoStrings","fun twoStrings(s1: String, s2: String): Boolean","hackerrank.maps.twoStrings"]},{"name":"interface SequenceGenerator","description":"p.SequenceGenerator","location":"kotlin-practice/p/-sequence-generator/index.html","searchKeys":["SequenceGenerator","interface SequenceGenerator","p.SequenceGenerator"]},{"name":"open class VersionControl","description":"leetcode.sorting.VersionControl","location":"kotlin-practice/leetcode.sorting/-version-control/index.html","searchKeys":["VersionControl","open class VersionControl","leetcode.sorting.VersionControl"]},{"name":"open operator override fun iterator(): Iterator<Type>","description":"p.CustomList.iterator","location":"kotlin-practice/p/-custom-list/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<Type>","p.CustomList.iterator"]},{"name":"open override fun call(): List<Long>","description":"p.PrintSequenceCallable.call","location":"kotlin-practice/p/-print-sequence-callable/call.html","searchKeys":["call","open override fun call(): List<Long>","p.PrintSequenceCallable.call"]},{"name":"open override fun getNext(): Long","description":"p.SafeSequenceGenerator.getNext","location":"kotlin-practice/p/-safe-sequence-generator/get-next.html","searchKeys":["getNext","open override fun getNext(): Long","p.SafeSequenceGenerator.getNext"]},{"name":"q0()","description":"leetcode.strings.State.q0","location":"kotlin-practice/leetcode.strings/-state/q0/index.html","searchKeys":["q0","q0()","leetcode.strings.State.q0"]},{"name":"q1()","description":"leetcode.strings.State.q1","location":"kotlin-practice/leetcode.strings/-state/q1/index.html","searchKeys":["q1","q1()","leetcode.strings.State.q1"]},{"name":"q2()","description":"leetcode.strings.State.q2","location":"kotlin-practice/leetcode.strings/-state/q2/index.html","searchKeys":["q2","q2()","leetcode.strings.State.q2"]},{"name":"qd()","description":"leetcode.strings.State.qd","location":"kotlin-practice/leetcode.strings/-state/qd/index.html","searchKeys":["qd","qd()","leetcode.strings.State.qd"]},{"name":"val data: Int","description":"leetcode.trees.Node.data","location":"kotlin-practice/leetcode.trees/-node/data.html","searchKeys":["data","val data: Int","leetcode.trees.Node.data"]},{"name":"val left: Node? = null","description":"leetcode.trees.Node.left","location":"kotlin-practice/leetcode.trees/-node/left.html","searchKeys":["left","val left: Node? = null","leetcode.trees.Node.left"]},{"name":"val right: Node? = null","description":"leetcode.trees.Node.right","location":"kotlin-practice/leetcode.trees/-node/right.html","searchKeys":["right","val right: Node? = null","leetcode.trees.Node.right"]},{"name":"var left: TreeNode? = null","description":"leetcode.trees.TreeNode.left","location":"kotlin-practice/leetcode.trees/-tree-node/left.html","searchKeys":["left","var left: TreeNode? = null","leetcode.trees.TreeNode.left"]},{"name":"var next: ListNode? = null","description":"leetcode.linkedlists.ListNode.next","location":"kotlin-practice/leetcode.linkedlists/-list-node/next.html","searchKeys":["next","var next: ListNode? = null","leetcode.linkedlists.ListNode.next"]},{"name":"var nums: IntArray","description":"leetcode.design.Solution.nums","location":"kotlin-practice/leetcode.design/-solution/nums.html","searchKeys":["nums","var nums: IntArray","leetcode.design.Solution.nums"]},{"name":"var right: TreeNode? = null","description":"leetcode.trees.TreeNode.right","location":"kotlin-practice/leetcode.trees/-tree-node/right.html","searchKeys":["right","var right: TreeNode? = null","leetcode.trees.TreeNode.right"]},{"name":"var val: Int","description":"leetcode.linkedlists.ListNode.val","location":"kotlin-practice/leetcode.linkedlists/-list-node/val.html","searchKeys":["val","var val: Int","leetcode.linkedlists.ListNode.val"]},{"name":"var val: Int","description":"leetcode.trees.TreeNode.val","location":"kotlin-practice/leetcode.trees/-tree-node/val.html","searchKeys":["val","var val: Int","leetcode.trees.TreeNode.val"]}]
